import { stringify } from "https://esm.sh/v128/yaml@2.3.1";
import Job from "./job.ts";
import {
  YamlSpec,
  Variable,
  Include,
  Rule,
  VariableSchema,
  RuleSchema,
} from "./gitlabci_spec.ts";

class GitlabCI {
  private yaml: YamlSpec;

  constructor() {
    this.yaml = [];
  }

  addJob(name: string, job: Job): GitlabCI {
    this.yaml.push({
      [name]: job.into(),
    });
    return this;
  }

  stages(stages: string[]): GitlabCI {
    this.yaml.push({
      stages,
    });
    return this;
  }

  variable(name: string, value: string): GitlabCI {
    if (this.yaml.find((item) => (item as { variables: Variable }).variables)) {
      (
        this.yaml.filter(
          (item) => (item as { variables: Variable }).variables
        )[0] as { variables: Variable }
      ).variables[name] = value;
      return this;
    }
    this.yaml.push({
      variables: {
        [name]: value,
      },
    });

    return this;
  }

  variables(variables: Variable): GitlabCI {
    VariableSchema.parse(variables);
    if (this.yaml.find((item) => (item as { variables: Variable }).variables)) {
      const { variables: vars } = this.yaml.filter(
        (item) => (item as { variables: Variable }).variables
      )[0] as {
        variables: Variable;
      };
      Object.assign(vars, variables);
      return this;
    }
    this.yaml.push({
      variables,
    });
    return this;
  }

  cache(paths: string[], key?: string): GitlabCI {
    this.yaml.push({
      cache: {
        paths,
        key,
      },
    });
    return this;
  }

  comment(text: string): GitlabCI {
    text = text.trim();
    text
      .split("\n")
      .map((line) => line.trim())
      .map((line) =>
        line.length > 0 ? this.yaml.push(`# ${line}`) : this.yaml.push("")
      );
    return this;
  }

  beforeScript(script: string): GitlabCI {
    script = script.trim();

    const before_script = script
      .split("\n")
      .map((line) => line.trim())
      .filter((line) => line.length > 0);

    this.yaml.push({
      before_script,
    });

    return this;
  }

  image(image: string): GitlabCI {
    this.yaml.push({
      image,
    });
    return this;
  }

  include(value: { template: string }): GitlabCI {
    if (this.yaml.find((item) => (item as { include: Include }).include)) {
      const { include } = this.yaml.filter(
        (item) => (item as { include: Include }).include
      )[0] as {
        include: Include;
      };
      if (include instanceof Array) {
        include.push(value);
      }
      return this;
    }
    this.yaml.push({
      include: [value],
    });
    return this;
  }

  workflow(value: { rules: Rule[] }): GitlabCI {
    for (const rule of value.rules) {
      RuleSchema.parse(rule);
    }
    this.yaml.push({
      workflow: value,
    });
    return this;
  }

  services(services: string[]): GitlabCI {
    this.yaml.push({
      services,
    });
    return this;
  }

  toString() {
    let str = `# Do not edit this file directly. It is generated by https://deno.land/x/fluent_gitlab_ci\n\n`;

    for (const item of this.yaml) {
      if (typeof item === "string") {
        str += `${item}\n`;
        continue;
      }
      str += `${stringify(item, { lineWidth: 0 })}\n`;
    }

    return str.replaceAll(" {}", "").replaceAll("|-", "|");
  }

  newLine(): GitlabCI {
    this.yaml.push("");
    return this;
  }

  write(path = ".gitlab-ci.yml") {
    const config = this.toString();
    Deno.writeTextFileSync(path, config);
  }
}

export default GitlabCI;
